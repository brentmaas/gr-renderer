#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D destTex;
layout(binding = 1) uniform sampler2D backgroundTex;

uniform vec2 destSize;
uniform vec2 backgroundSize;

uniform vec3 cameraPosition;
uniform vec3 cameraRotation;
uniform float cameraHFov;

uniform float mass;
uniform float diskMin;
uniform float diskMax;
uniform vec3 diskColour;
uniform int steps;
uniform float dAffineFactor;

float pi = 3.141592;

void christoffelSymbols(in vec4 position, out vec4 symbols[16]){
    float r = length(position.xyz);
    float factor = mass / r / r / r;
    float one_over_factor_plus = 1 / (1 + 0.5 * mass / r);
    float factor_minus = 1 - 0.5 * mass / r;
    float one_over_factor_minus = 1 / factor_minus;
    
    symbols[0] = vec4(-position.xyz * factor * one_over_factor_plus, 0); // x, x
    symbols[1] = vec4(-position.y * factor * one_over_factor_plus, position.x * factor * one_over_factor_plus, 0, 0); // x, y
    symbols[2] = vec4(-position.z * factor * one_over_factor_plus, 0, position.x * factor * one_over_factor_plus, 0); // x, z
    symbols[3] = vec4(0, 0, 0, position.x * factor * factor_minus * pow(one_over_factor_plus, 7)); // x, t
    symbols[4] = vec4(position.y * factor * one_over_factor_plus, -position.x * factor * one_over_factor_plus, 0, 0); // y, x
    symbols[5] = vec4(-position.xyz * factor * one_over_factor_plus, 0); // y, y
    symbols[6] = vec4(0, -position.z * factor * one_over_factor_plus, position.y * factor * one_over_factor_plus, 0); // y, z
    symbols[7] = vec4(0, 0, 0, position.y * factor * factor_minus * pow(one_over_factor_plus, 7)); // y, t
    symbols[8] = vec4(position.z * factor * one_over_factor_plus, 0, -position.x * factor * one_over_factor_plus, 0); // z, x
    symbols[9] = vec4(0, position.z * factor * one_over_factor_plus, -position.y * factor * one_over_factor_plus, 0); // z, y
    symbols[10] = vec4(-position.xyz * factor * one_over_factor_plus, 0); // z, z
    symbols[11] = vec4(0, 0, 0, position.z * factor * factor_minus * pow(one_over_factor_plus, 7)); // z, t
    symbols[12] = vec4(0, 0, 0, position.x * factor * one_over_factor_minus); // t, x
    symbols[13] = vec4(0, 0, 0, position.y * factor * one_over_factor_minus); // t, y
    symbols[14] = vec4(0, 0, 0, position.z * factor * one_over_factor_minus); // t, z
    symbols[15] = vec4(position.xyz * factor * one_over_factor_minus, 0); // t, t
}

float diskTransparencyAt(float r){
    return 1.0f / r / (1.0f / diskMin - 1.0f / diskMax) + 1.0f / (1.0f - diskMax / diskMin);
}

void main(){
    const ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if(any(greaterThanEqual(gid, destSize))) return;
    
    vec4 colour = vec4(0, 0, 0, 1);
    if(length(cameraPosition.xyz) > 2 * mass){
        float cameraVFov = cameraHFov * destSize.y / destSize.x;
        float viewTheta = 2 * (gid.y / destSize.y - 0.5) * cameraVFov;
        float viewPhi = 2 * (gid.x / destSize.x - 0.5) * cameraHFov;
        vec3 v = vec3(cos(viewTheta) * cos(viewPhi), cos(viewTheta) * sin(viewPhi), sin(viewTheta));
        v.xz = vec2(v.x * sin(cameraRotation.x) - v.z * cos(cameraRotation.x), v.z * sin(cameraRotation.x) + v.x * cos(cameraRotation.x));
        v.xy = vec2(v.x * cos(cameraRotation.y) + v.y * sin(cameraRotation.y), v.y * cos(cameraRotation.y) - v.x * sin(cameraRotation.y));
        float r = length(cameraPosition);
        float rIso = 0.5 * (r + sqrt(r * r - 2 * mass * r) - mass);
        float f = 0.5 * mass / rIso;
        vec4 position = vec4(cameraPosition.xyz / ((1 + f) * (1 + f)), 0);
        vec3 velocityIso3 = v / ((1 + f) * (1 + f));
        vec4 velocity = vec4(velocityIso3, sqrt(pow(1 + f, 6) / ((1 - f) * (1 - f)) * dot(velocityIso3, velocityIso3)));
        
        vec4 symbols[16];
        vec4 dVelocity;
        float dAffineFactor_over_half_mass = dAffineFactor * 2 / mass;
        for(int i = 0;i < steps;++i){
            float dAffine = dAffineFactor_over_half_mass * sqrt(length(position.xyz));
            if(length((position - velocity * dAffine).xyz) <= (0.5 * mass)){
                colour.w = 0;
                break;
            }
            
            // TODO: red-/blueshift
            if(position.z * (position.z - velocity.z * dAffine) < 0){
                float nrIso = length(position.xyz);
                float nr = nrIso * (1.0f + 0.5f * mass / nrIso) * (1.0f + 0.5f * mass / nrIso);
                if(nr >= diskMin && nr <= diskMax){
                    float transparency = diskTransparencyAt(nr);
                    colour.xyz += diskColour * transparency * colour.w;
                    colour.w -= transparency * colour.w;
                }
            }
            
            position -= velocity * dAffine;
            christoffelSymbols(position, symbols);
            dVelocity = vec4(0, 0, 0, 0);
            for(int mu = 0;mu < 4;++mu){
                for(int rho = 0;rho < 4;++rho){
                    dVelocity[mu] -= dot(symbols[4 * mu + rho], velocity) * velocity[rho];
                }
            }
            velocity -= dVelocity * dAffine;
        }
        
        rIso = length(position.xyz);
        f = 1 + 0.5 * mass / rIso;
        vec3 velocity3 = velocity.xyz * f * f;
        float theta = atan(velocity.z, length(velocity3.xy)) + 0.5 * pi;
        float phi = atan(velocity3.y, velocity3.x) + pi;
        // TODO: red-/blueshift
        colour.xyz += texture(backgroundTex, vec2(0.5 * phi / pi, theta / pi)).xyz * colour.w;
    }
    
    imageStore(destTex, gid, colour);
}
